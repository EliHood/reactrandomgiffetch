{"version":3,"sources":["logo.svg","Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","react_default","a","createElement","this","props","slug","src","url","React","Component","Styles","marginTop","inputStyle","borderRadius","border","borderBottom","outline","focus","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getGIY","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","_this$state","query","response","data","mainData","wrap","_context","prev","next","preventDefault","console","log","state","fetch","concat","sent","json","setState","title","images","downsized","t0","stop","_x","apply","arguments","undefined","onChange","bind","assertThisInitialized","target","value","_this2","className","style","onSubmit","type","name","ref","input","_query","placeholder","src_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d8f5101.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\n\nconst Styles = {\n    width: '300px',\n    height: '300px'\n}\n\nclass Card extends React.Component {\n\n    render() {\n\n        return (\n\n            <div>\n                <h1>{this.props.slug}</h1>\n\n                <div >\n                    <img src={this.props.url}/>\n                </div>\n\n            </div>\n\n        );\n\n    }\n\n}\n\nexport default Card;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Card from './Card';\nimport {throws} from 'assert';\n\nconst Styles = {\n    marginTop: '100px',\n\n    inputStyle: {\n        borderRadius: '0px',\n        border: 'none',\n        borderBottom: '2px solid #000',\n        outline: 'none',\n        focus: 'none'\n\n    }\n}\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            query: '',\n            slug: undefined,\n            url: undefined\n        }\n\n        this.onChange = this\n            .onChange\n            .bind(this);\n\n    }\n\n    onChange(e) {\n        this.setState({query: e.target.value})\n    }\n\n    getGIY = async(e) => {\n        e.preventDefault();\n        console.log(this.state)\n\n        try {\n            const {slug, url} = this.state;\n            const query = this.state.query\n            const response = await fetch(`https://api.giphy.com/v1/gifs/search?q=${query}&api_key=iBXhsCDYcnktw8n3WSJvIUQCXRqVv8AP&limit=5`);\n            const data = await response.json();\n            const mainData = data.data;\n            this.setState({slug: mainData[0].title, url: mainData[0].images.downsized.url});\n\n            console.log(mainData);\n\n        } catch (error) {\n            console.log(error);\n        }\n\n    }\n\n    render() {\n        return (\n            <div className=\"col-md-6 mx-auto\" style={Styles}>\n                <h1>Random GIF fetch</h1>\n\n                <form className=\"form-group\" onSubmit={this.getGIY}>\n                    <input\n                        style={Styles.inputStyle}\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"query\"\n                        onChange={this.onChange}\n                        ref={(input) => {\n                        this.state._query = input\n                    }}\n                        placeholder=\"Search GIF...\"/>\n                    <button type=\"submit\" className=\"btn btn-primary mt-4\">Get GIF</button>\n\n                </form>\n\n                <Card slug={this.state.slug} url={this.state.url}/>\n            </div>\n        );\n\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}